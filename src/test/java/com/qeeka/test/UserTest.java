package com.qeeka.test;

import com.qeeka.query.Criteria;
import com.qeeka.test.domain.RoleEntity;
import com.qeeka.test.domain.UserEntity;
import com.qeeka.test.repository.UserRepository;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.List;

/**
 * Created by neal.xu on 2018/12/13.
 */
public class UserTest extends SpringTestWithDB {
    @Autowired
    private UserRepository userRepository;


    @Before
    @Transactional
    public void init() {
        userRepository.update("create table user(user_id int,name varchar(50),role_id int,create_time timestamp,PRIMARY KEY (user_id))");
        userRepository.update("insert into user values(1,'name1',0,now())");
        userRepository.update("insert into user values(2,'name2',1,now())");
        userRepository.update("insert into user values(3,'name3',2,now())");

        userRepository.update("create table role(id INTEGER GENERATED BY DEFAULT AS IDENTITY,name varchar(50),create_time timestamp,PRIMARY KEY (id))");
        userRepository.update("insert into role(name,create_time) values('role1',now())");
        userRepository.update("insert into role(name,create_time) values('role2',now())");
        userRepository.update("insert into role(name,create_time) values('role3',now())");
    }

    @After
    @Transactional
    public void after() {
        userRepository.update("drop table user");
        userRepository.update("drop table role");
    }

    @Test
    public void selectAll() {
        List<UserEntity> records = userRepository.query().getRecords();
        Assert.assertEquals(records.size(), 3);
    }

    @Test
    public void testGet() {
        UserEntity userEntity = userRepository.get(1);
        Assert.assertEquals(userEntity.getUserId(), Integer.valueOf(1));
        RoleEntity roleEntity = userRepository.get(userEntity.getRoleId(), RoleEntity.class);
        Assert.assertEquals(roleEntity.getName(), "role1");
    }

    @Test
    public void save() {
        UserEntity user = new UserEntity();
        user.setUserId(4);
        user.setName("neal");
        user.setRoleId(0);
        user.setCreateTime(new Date());
        userRepository.save(user);

        Assert.assertEquals(user.getUserId(), Integer.valueOf(4));

        RoleEntity role = new RoleEntity();
        role.setName("test1");
        role.setCreateTime(new Date());
        userRepository.save(role);
        Assert.assertEquals(role.getId(), Integer.valueOf(3));
    }

    @Test
    @Transactional
    public void delete() {
        UserEntity user = new UserEntity();
        user.setUserId(3);
        userRepository.delete(user);
        userRepository.deleteById(2);

        userRepository.deleteById(1, RoleEntity.class);

        Long userCount = userRepository.count();
        Long roleCount = userRepository.count(RoleEntity.class);

        Assert.assertEquals(userCount, Long.valueOf(1));
        Assert.assertEquals(roleCount, Long.valueOf(2));
    }


    @Test
    @Transactional
    public void update() {
        UserEntity userEntity = userRepository.get(1);
        userEntity.setName("neal");
        int update = userRepository.update(userEntity);
        Assert.assertTrue(update == 1);
        UserEntity newEntity = userRepository.get(1);
        Assert.assertEquals(newEntity.getName(), "neal");
    }

    @Test
    public void testRole() {
//        UserEntity userEntity = userRepository.queryUnique(Criteria.where("role_id").eq(1));
//        Assert.assertEquals(userEntity.getName(), "name2");
    }
}
